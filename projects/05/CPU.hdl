// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // 何かをCに入れる
    // TODO:decode
    // instruction[0] j3
    // instruction[1] j2
    // instruction[2] j1 
    // instruction[3] d3 Memory A
    // instruction[4] d2 DRegisterの保存
    // instruction[5] d1 ARegisterの保存
    // instruction[6] c6 ALU
    // instruction[7] c5 ALU
    // instruction[8] c4 ALU
    // instruction[9] c3 ALU
    // instruction[10] c2 ALU
    // instruction[11] c1 ALU
    // instruction[12] a
    Mux16(a=False, b=instruction, sel=instruction[15], out=ins, out[3]=m, out[3]=writeM,out[4]=d, out[5]=writeA,out[11]=zx,out[10]=nx,out[9]=zy,out[8]=ny,out[7]=f,out[6] =no);
    Mux16(a=outMCopy, b=instruction, sel=m, out=outMux);
    // 15ビットが0のときはARegister保存
    Not(in=instruction[15], out=aF);
    ARegister(in=outMux, load=writeA,out=outA,out[0..14]=addressM);
    Memory(in=inM, load=m, address=instruction[0..14],out=outMemory);

    Mux16(a=outA, b=inM, sel=m,out=outAM);
    DRegister(in=outMCopy, load=d,out=outD);
    ALU(x=outD, y=outAM, zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no ,out=outM,out=outMCopy,zr=outZr,ng=outNg);
    
    PC(in=outA, load=outZr, inc=outNg, reset=reset, out[0..14]=pc);




}